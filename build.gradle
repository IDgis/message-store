buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.5'
        classpath 'org.ajoberstar:gradle-git:1.3.2'
    }
}

plugins {
    id 'play'
}

repositories {
    jcenter()
    maven {
        name "typesafe-maven-release"
        url "https://repo.typesafe.com/typesafe/maven-releases"
    }
    ivy {
        name "typesafe-ivy-release"
        url "https://repo.typesafe.com/typesafe/ivy-releases"
        layout "ivy"
    }
}

import org.ajoberstar.grgit.Grgit

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage

def repo = Grgit.open(project.file('.'))
def describe = repo.describe()

if(describe && describe.startsWith('v')) {
    version = describe.substring(1)
} else {
    version = 'unversioned'
}

apply plugin: 'com.bmuschko.docker-remote-api'

docker {
    def env = System.env
    url = "$env.DOCKER_HOST"
    
    if(env.containsKey('DOCKER_TLS_VERIFY')) {
        url = url.replace('tcp', 'https')
    } else {
        url = url.replace('tcp', 'http')
    }
    
    if(env.containsKey('DOCKER_CERT_PATH')) {
        certPath = project.file "$env.DOCKER_CERT_PATH"
    }
}

def playVersion = '2.5.10'
def scalaVersion = '2.11'

model {
    components {
        play {
            platform play: playVersion, scala: scalaVersion
            
            injectedRoutesGenerator = true
            
            binaries.all {
                tasks.withType(PlatformScalaCompile) {
                    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
                }
            }
        }
    }
    
    tasks {
        def baseImage = 'azul/zulu-openjdk'
        
        copyTar(Copy) {
            dependsOn createPlayBinaryTarDist
            from project.tarTree("${project.buildDir}/distributions/playBinary.tar")
            into "${project.buildDir}/docker"
        }
        
        pullBaseImage(DockerPullImage) {
            repository baseImage
            tag 'latest'
        }
        
        createDockerfile(Dockerfile) {
            dependsOn copyTar
            destFile = project.file('build/docker/Dockerfile')
            from baseImage
            copyFile 'playBinary', '/opt'
            runCommand 'chmod u+x /opt/bin/playBinary'
            exposePort 9000
            defaultCommand "/opt/bin/playBinary"
        }
        
        buildImage(DockerBuildImage) {
            dependsOn pullBaseImage, createDockerfile
            inputDir = project.file('build/docker')
            tag = "idgis/message-store:${project.version}"
        }
    }
}

dependencies {
    play "com.typesafe.play:play-cache_${scalaVersion}:${playVersion}"
}